type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

type Address {
  id: ID!
  country: String
  city: String
  address: String
  active: Boolean
  field: String
  employee: Employee
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  country: String
  country_not: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  country_i: String
  country_not_i: String
  country_contains_i: String
  country_not_contains_i: String
  country_starts_with_i: String
  country_not_starts_with_i: String
  country_ends_with_i: String
  country_not_ends_with_i: String
  country_in: [String]
  country_not_in: [String]
  city: String
  city_not: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  city_i: String
  city_not_i: String
  city_contains_i: String
  city_not_contains_i: String
  city_starts_with_i: String
  city_not_starts_with_i: String
  city_ends_with_i: String
  city_not_ends_with_i: String
  city_in: [String]
  city_not_in: [String]
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_i: String
  address_not_i: String
  address_contains_i: String
  address_not_contains_i: String
  address_starts_with_i: String
  address_not_starts_with_i: String
  address_ends_with_i: String
  address_not_ends_with_i: String
  address_in: [String]
  address_not_in: [String]
  active: Boolean
  active_not: Boolean
  field: String
  field_not: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  field_i: String
  field_not_i: String
  field_contains_i: String
  field_not_contains_i: String
  field_starts_with_i: String
  field_not_starts_with_i: String
  field_ends_with_i: String
  field_not_ends_with_i: String
  field_in: [String]
  field_not_in: [String]
  employee: EmployeeWhereInput
  employee_is_null: Boolean
}

input AddressWhereUniqueInput {
  id: ID
}

enum SortAddressesBy {
  id_ASC
  id_DESC
  country_ASC
  country_DESC
  city_ASC
  city_DESC
  address_ASC
  address_DESC
  active_ASC
  active_DESC
  field_ASC
  field_DESC
}

input AddressOrderByInput {
  id: OrderDirection
  country: OrderDirection
  city: OrderDirection
  address: OrderDirection
  active: OrderDirection
  field: OrderDirection
}

input AddressUpdateInput {
  country: String
  city: String
  address: String
  active: Boolean
  field: String
  employee: EmployeeRelateToOneInput
}

input EmployeeRelateToOneInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
  disconnect: EmployeeWhereUniqueInput
  disconnectAll: Boolean
}

input AddressesUpdateInput {
  id: ID!
  data: AddressUpdateInput
}

input AddressCreateInput {
  country: String
  city: String
  address: String
  active: Boolean
  field: String
  employee: EmployeeRelateToOneInput
}

input AddressesCreateInput {
  data: AddressCreateInput
}

type Technology {
  id: ID!
  name: String
  description: String
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
}

input TechnologyWhereUniqueInput {
  id: ID
}

enum SortTechnologiesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

input TechnologyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input TechnologyUpdateInput {
  name: String
  description: String
}

input TechnologiesUpdateInput {
  id: ID!
  data: TechnologyUpdateInput
}

input TechnologyCreateInput {
  name: String
  description: String
}

input TechnologiesCreateInput {
  data: TechnologyCreateInput
}

type Client {
  id: ID!
  name: String
  description: String
  website: String
  representatives(
    where: ClientRepresentativeWhereInput! = {}
    search: String
    sortBy: [SortClientRepresentativesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClientRepresentativeOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [ClientRepresentative!]
  _representativesMeta(
    where: ClientRepresentativeWhereInput! = {}
    search: String
    sortBy: [SortClientRepresentativesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClientRepresentativeOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use representativesCount instead."
    )
  representativesCount(where: ClientRepresentativeWhereInput! = {}): Int
}

type _QueryMeta {
  count: Int
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  website: String
  website_not: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  website_i: String
  website_not_i: String
  website_contains_i: String
  website_not_contains_i: String
  website_starts_with_i: String
  website_not_starts_with_i: String
  website_ends_with_i: String
  website_not_ends_with_i: String
  website_in: [String]
  website_not_in: [String]
  representatives_every: ClientRepresentativeWhereInput
  representatives_some: ClientRepresentativeWhereInput
  representatives_none: ClientRepresentativeWhereInput
}

input ClientWhereUniqueInput {
  id: ID
}

enum SortClientsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  website_ASC
  website_DESC
}

input ClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  website: OrderDirection
}

input ClientUpdateInput {
  name: String
  description: String
  website: String
  representatives: ClientRepresentativeRelateToManyInput
}

input ClientRepresentativeRelateToManyInput {
  create: [ClientRepresentativeCreateInput]
  connect: [ClientRepresentativeWhereUniqueInput]
  disconnect: [ClientRepresentativeWhereUniqueInput]
  disconnectAll: Boolean
}

input ClientsUpdateInput {
  id: ID!
  data: ClientUpdateInput
}

input ClientCreateInput {
  name: String
  description: String
  website: String
  representatives: ClientRepresentativeRelateToManyInput
}

input ClientsCreateInput {
  data: ClientCreateInput
}

type ClientRepresentative {
  id: ID!
  firstName: String
  lastName: String
  email: String
  client: Client
}

input ClientRepresentativeWhereInput {
  AND: [ClientRepresentativeWhereInput!]
  OR: [ClientRepresentativeWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  firstName: String
  firstName_not: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  firstName_i: String
  firstName_not_i: String
  firstName_contains_i: String
  firstName_not_contains_i: String
  firstName_starts_with_i: String
  firstName_not_starts_with_i: String
  firstName_ends_with_i: String
  firstName_not_ends_with_i: String
  firstName_in: [String]
  firstName_not_in: [String]
  lastName: String
  lastName_not: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  lastName_i: String
  lastName_not_i: String
  lastName_contains_i: String
  lastName_not_contains_i: String
  lastName_starts_with_i: String
  lastName_not_starts_with_i: String
  lastName_ends_with_i: String
  lastName_not_ends_with_i: String
  lastName_in: [String]
  lastName_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  client: ClientWhereInput
  client_is_null: Boolean
}

input ClientRepresentativeWhereUniqueInput {
  id: ID
}

enum SortClientRepresentativesBy {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
}

input ClientRepresentativeOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
}

input ClientRepresentativeUpdateInput {
  firstName: String
  lastName: String
  email: String
  client: ClientRelateToOneInput
}

input ClientRelateToOneInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: ClientWhereUniqueInput
  disconnectAll: Boolean
}

input ClientRepresentativesUpdateInput {
  id: ID!
  data: ClientRepresentativeUpdateInput
}

input ClientRepresentativeCreateInput {
  firstName: String
  lastName: String
  email: String
  client: ClientRelateToOneInput
}

input ClientRepresentativesCreateInput {
  data: ClientRepresentativeCreateInput
}

type Project {
  id: ID!
  name: String
  description: String
  startDate: String
  client: Client
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  startDate: String
  startDate_not: String
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_in: [String]
  startDate_not_in: [String]
  client: ClientWhereInput
  client_is_null: Boolean
}

input ProjectWhereUniqueInput {
  id: ID
}

enum SortProjectsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  startDate_ASC
  startDate_DESC
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  startDate: OrderDirection
}

input ProjectUpdateInput {
  name: String
  description: String
  startDate: String
  client: ClientRelateToOneInput
}

input ProjectsUpdateInput {
  id: ID!
  data: ProjectUpdateInput
}

input ProjectCreateInput {
  name: String
  description: String
  startDate: String
  client: ClientRelateToOneInput
}

input ProjectsCreateInput {
  data: ProjectCreateInput
}

type Employee {
  id: ID!
  firstName: String
  lastName: String
  entitlement: String
  isOnBench: Boolean
  level: EmployeeLevelType
  gender: String
  manager: Employee
  project: Project
  linkedin: String
  hiringRank: String
  backgroundCheckStatus: Boolean
  onBoardingStatus: Boolean
  source: String
  leverLink: String
  education: String
  employeeType: String
  isBillable: String
  billRate: Float
  address: Address
}

enum EmployeeLevelType {
  junior
  midlevel
  senior
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  firstName: String
  firstName_not: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  firstName_i: String
  firstName_not_i: String
  firstName_contains_i: String
  firstName_not_contains_i: String
  firstName_starts_with_i: String
  firstName_not_starts_with_i: String
  firstName_ends_with_i: String
  firstName_not_ends_with_i: String
  firstName_in: [String]
  firstName_not_in: [String]
  lastName: String
  lastName_not: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  lastName_i: String
  lastName_not_i: String
  lastName_contains_i: String
  lastName_not_contains_i: String
  lastName_starts_with_i: String
  lastName_not_starts_with_i: String
  lastName_ends_with_i: String
  lastName_not_ends_with_i: String
  lastName_in: [String]
  lastName_not_in: [String]
  entitlement: String
  entitlement_not: String
  entitlement_contains: String
  entitlement_not_contains: String
  entitlement_starts_with: String
  entitlement_not_starts_with: String
  entitlement_ends_with: String
  entitlement_not_ends_with: String
  entitlement_i: String
  entitlement_not_i: String
  entitlement_contains_i: String
  entitlement_not_contains_i: String
  entitlement_starts_with_i: String
  entitlement_not_starts_with_i: String
  entitlement_ends_with_i: String
  entitlement_not_ends_with_i: String
  entitlement_in: [String]
  entitlement_not_in: [String]
  isOnBench: Boolean
  isOnBench_not: Boolean
  level: EmployeeLevelType
  level_not: EmployeeLevelType
  level_in: [EmployeeLevelType]
  level_not_in: [EmployeeLevelType]
  gender: String
  gender_not: String
  gender_in: [String]
  gender_not_in: [String]
  manager: EmployeeWhereInput
  manager_is_null: Boolean
  project: ProjectWhereInput
  project_is_null: Boolean
  linkedin: String
  linkedin_not: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  linkedin_i: String
  linkedin_not_i: String
  linkedin_contains_i: String
  linkedin_not_contains_i: String
  linkedin_starts_with_i: String
  linkedin_not_starts_with_i: String
  linkedin_ends_with_i: String
  linkedin_not_ends_with_i: String
  linkedin_in: [String]
  linkedin_not_in: [String]
  hiringRank: String
  hiringRank_not: String
  hiringRank_contains: String
  hiringRank_not_contains: String
  hiringRank_starts_with: String
  hiringRank_not_starts_with: String
  hiringRank_ends_with: String
  hiringRank_not_ends_with: String
  hiringRank_i: String
  hiringRank_not_i: String
  hiringRank_contains_i: String
  hiringRank_not_contains_i: String
  hiringRank_starts_with_i: String
  hiringRank_not_starts_with_i: String
  hiringRank_ends_with_i: String
  hiringRank_not_ends_with_i: String
  hiringRank_in: [String]
  hiringRank_not_in: [String]
  backgroundCheckStatus: Boolean
  backgroundCheckStatus_not: Boolean
  onBoardingStatus: Boolean
  onBoardingStatus_not: Boolean
  source: String
  source_not: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  source_i: String
  source_not_i: String
  source_contains_i: String
  source_not_contains_i: String
  source_starts_with_i: String
  source_not_starts_with_i: String
  source_ends_with_i: String
  source_not_ends_with_i: String
  source_in: [String]
  source_not_in: [String]
  leverLink: String
  leverLink_not: String
  leverLink_contains: String
  leverLink_not_contains: String
  leverLink_starts_with: String
  leverLink_not_starts_with: String
  leverLink_ends_with: String
  leverLink_not_ends_with: String
  leverLink_i: String
  leverLink_not_i: String
  leverLink_contains_i: String
  leverLink_not_contains_i: String
  leverLink_starts_with_i: String
  leverLink_not_starts_with_i: String
  leverLink_ends_with_i: String
  leverLink_not_ends_with_i: String
  leverLink_in: [String]
  leverLink_not_in: [String]
  education: String
  education_not: String
  education_contains: String
  education_not_contains: String
  education_starts_with: String
  education_not_starts_with: String
  education_ends_with: String
  education_not_ends_with: String
  education_i: String
  education_not_i: String
  education_contains_i: String
  education_not_contains_i: String
  education_starts_with_i: String
  education_not_starts_with_i: String
  education_ends_with_i: String
  education_not_ends_with_i: String
  education_in: [String]
  education_not_in: [String]
  employeeType: String
  employeeType_not: String
  employeeType_contains: String
  employeeType_not_contains: String
  employeeType_starts_with: String
  employeeType_not_starts_with: String
  employeeType_ends_with: String
  employeeType_not_ends_with: String
  employeeType_i: String
  employeeType_not_i: String
  employeeType_contains_i: String
  employeeType_not_contains_i: String
  employeeType_starts_with_i: String
  employeeType_not_starts_with_i: String
  employeeType_ends_with_i: String
  employeeType_not_ends_with_i: String
  employeeType_in: [String]
  employeeType_not_in: [String]
  isBillable: String
  isBillable_not: String
  isBillable_contains: String
  isBillable_not_contains: String
  isBillable_starts_with: String
  isBillable_not_starts_with: String
  isBillable_ends_with: String
  isBillable_not_ends_with: String
  isBillable_i: String
  isBillable_not_i: String
  isBillable_contains_i: String
  isBillable_not_contains_i: String
  isBillable_starts_with_i: String
  isBillable_not_starts_with_i: String
  isBillable_ends_with_i: String
  isBillable_not_ends_with_i: String
  isBillable_in: [String]
  isBillable_not_in: [String]
  billRate: Float
  billRate_not: Float
  billRate_lt: Float
  billRate_lte: Float
  billRate_gt: Float
  billRate_gte: Float
  billRate_in: [Float]
  billRate_not_in: [Float]
  address: AddressWhereInput
  address_is_null: Boolean
}

input EmployeeWhereUniqueInput {
  id: ID
}

enum SortEmployeesBy {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  entitlement_ASC
  entitlement_DESC
  isOnBench_ASC
  isOnBench_DESC
  level_ASC
  level_DESC
  gender_ASC
  gender_DESC
  linkedin_ASC
  linkedin_DESC
  hiringRank_ASC
  hiringRank_DESC
  backgroundCheckStatus_ASC
  backgroundCheckStatus_DESC
  onBoardingStatus_ASC
  onBoardingStatus_DESC
  source_ASC
  source_DESC
  leverLink_ASC
  leverLink_DESC
  education_ASC
  education_DESC
  employeeType_ASC
  employeeType_DESC
  isBillable_ASC
  isBillable_DESC
  billRate_ASC
  billRate_DESC
}

input EmployeeOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  entitlement: OrderDirection
  isOnBench: OrderDirection
  level: OrderDirection
  gender: OrderDirection
  linkedin: OrderDirection
  hiringRank: OrderDirection
  backgroundCheckStatus: OrderDirection
  onBoardingStatus: OrderDirection
  source: OrderDirection
  leverLink: OrderDirection
  education: OrderDirection
  employeeType: OrderDirection
  isBillable: OrderDirection
  billRate: OrderDirection
}

input EmployeeUpdateInput {
  firstName: String
  lastName: String
  entitlement: String
  isOnBench: Boolean
  level: EmployeeLevelType
  gender: String
  manager: EmployeeRelateToOneInput
  project: ProjectRelateToOneInput
  linkedin: String
  hiringRank: String
  backgroundCheckStatus: Boolean
  onBoardingStatus: Boolean
  source: String
  leverLink: String
  education: String
  employeeType: String
  isBillable: String
  billRate: Float
  address: AddressRelateToOneInput
}

input ProjectRelateToOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: ProjectWhereUniqueInput
  disconnectAll: Boolean
}

input AddressRelateToOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: AddressWhereUniqueInput
  disconnectAll: Boolean
}

input EmployeesUpdateInput {
  id: ID!
  data: EmployeeUpdateInput
}

input EmployeeCreateInput {
  firstName: String
  lastName: String
  entitlement: String
  isOnBench: Boolean
  level: EmployeeLevelType
  gender: String
  manager: EmployeeRelateToOneInput
  project: ProjectRelateToOneInput
  linkedin: String
  hiringRank: String
  backgroundCheckStatus: Boolean
  onBoardingStatus: Boolean
  source: String
  leverLink: String
  education: String
  employeeType: String
  isBillable: String
  billRate: Float
  address: AddressRelateToOneInput
}

input EmployeesCreateInput {
  data: EmployeeCreateInput
}

type Skill {
  id: ID!
  employee: Employee
  tech: Technology
  yearsOfExperience: Int
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  employee: EmployeeWhereInput
  employee_is_null: Boolean
  tech: TechnologyWhereInput
  tech_is_null: Boolean
  yearsOfExperience: Int
  yearsOfExperience_not: Int
  yearsOfExperience_lt: Int
  yearsOfExperience_lte: Int
  yearsOfExperience_gt: Int
  yearsOfExperience_gte: Int
  yearsOfExperience_in: [Int]
  yearsOfExperience_not_in: [Int]
}

input SkillWhereUniqueInput {
  id: ID
}

enum SortSkillsBy {
  id_ASC
  id_DESC
  yearsOfExperience_ASC
  yearsOfExperience_DESC
}

input SkillOrderByInput {
  id: OrderDirection
  yearsOfExperience: OrderDirection
}

input SkillUpdateInput {
  employee: EmployeeRelateToOneInput
  tech: TechnologyRelateToOneInput
  yearsOfExperience: Int
}

input TechnologyRelateToOneInput {
  create: TechnologyCreateInput
  connect: TechnologyWhereUniqueInput
  disconnect: TechnologyWhereUniqueInput
  disconnectAll: Boolean
}

input SkillsUpdateInput {
  id: ID!
  data: SkillUpdateInput
}

input SkillCreateInput {
  employee: EmployeeRelateToOneInput
  tech: TechnologyRelateToOneInput
  yearsOfExperience: Int
}

input SkillsCreateInput {
  data: SkillCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createAddress(data: AddressCreateInput): Address
  createAddresses(data: [AddressesCreateInput]): [Address]
  updateAddress(id: ID!, data: AddressUpdateInput): Address
  updateAddresses(data: [AddressesUpdateInput]): [Address]
  deleteAddress(id: ID!): Address
  deleteAddresses(ids: [ID!]): [Address]
  createTechnology(data: TechnologyCreateInput): Technology
  createTechnologies(data: [TechnologiesCreateInput]): [Technology]
  updateTechnology(id: ID!, data: TechnologyUpdateInput): Technology
  updateTechnologies(data: [TechnologiesUpdateInput]): [Technology]
  deleteTechnology(id: ID!): Technology
  deleteTechnologies(ids: [ID!]): [Technology]
  createClient(data: ClientCreateInput): Client
  createClients(data: [ClientsCreateInput]): [Client]
  updateClient(id: ID!, data: ClientUpdateInput): Client
  updateClients(data: [ClientsUpdateInput]): [Client]
  deleteClient(id: ID!): Client
  deleteClients(ids: [ID!]): [Client]
  createClientRepresentative(
    data: ClientRepresentativeCreateInput
  ): ClientRepresentative
  createClientRepresentatives(
    data: [ClientRepresentativesCreateInput]
  ): [ClientRepresentative]
  updateClientRepresentative(
    id: ID!
    data: ClientRepresentativeUpdateInput
  ): ClientRepresentative
  updateClientRepresentatives(
    data: [ClientRepresentativesUpdateInput]
  ): [ClientRepresentative]
  deleteClientRepresentative(id: ID!): ClientRepresentative
  deleteClientRepresentatives(ids: [ID!]): [ClientRepresentative]
  createProject(data: ProjectCreateInput): Project
  createProjects(data: [ProjectsCreateInput]): [Project]
  updateProject(id: ID!, data: ProjectUpdateInput): Project
  updateProjects(data: [ProjectsUpdateInput]): [Project]
  deleteProject(id: ID!): Project
  deleteProjects(ids: [ID!]): [Project]
  createEmployee(data: EmployeeCreateInput): Employee
  createEmployees(data: [EmployeesCreateInput]): [Employee]
  updateEmployee(id: ID!, data: EmployeeUpdateInput): Employee
  updateEmployees(data: [EmployeesUpdateInput]): [Employee]
  deleteEmployee(id: ID!): Employee
  deleteEmployees(ids: [ID!]): [Employee]
  createSkill(data: SkillCreateInput): Skill
  createSkills(data: [SkillsCreateInput]): [Skill]
  updateSkill(id: ID!, data: SkillUpdateInput): Skill
  updateSkills(data: [SkillsUpdateInput]): [Skill]
  deleteSkill(id: ID!): Skill
  deleteSkills(ids: [ID!]): [Skill]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  User(where: UserWhereUniqueInput!): User
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  allAddresses(
    where: AddressWhereInput! = {}
    search: String
    sortBy: [SortAddressesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AddressOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Address!]
  Address(where: AddressWhereUniqueInput!): Address
  _allAddressesMeta(
    where: AddressWhereInput! = {}
    search: String
    sortBy: [SortAddressesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AddressOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use addressesCount instead."
    )
  addressesCount(where: AddressWhereInput! = {}): Int
  allTechnologies(
    where: TechnologyWhereInput! = {}
    search: String
    sortBy: [SortTechnologiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TechnologyOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Technology!]
  Technology(where: TechnologyWhereUniqueInput!): Technology
  _allTechnologiesMeta(
    where: TechnologyWhereInput! = {}
    search: String
    sortBy: [SortTechnologiesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TechnologyOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use technologiesCount instead."
    )
  technologiesCount(where: TechnologyWhereInput! = {}): Int
  allClients(
    where: ClientWhereInput! = {}
    search: String
    sortBy: [SortClientsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClientOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Client!]
  Client(where: ClientWhereUniqueInput!): Client
  _allClientsMeta(
    where: ClientWhereInput! = {}
    search: String
    sortBy: [SortClientsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClientOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use clientsCount instead."
    )
  clientsCount(where: ClientWhereInput! = {}): Int
  allClientRepresentatives(
    where: ClientRepresentativeWhereInput! = {}
    search: String
    sortBy: [SortClientRepresentativesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClientRepresentativeOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [ClientRepresentative!]
  ClientRepresentative(
    where: ClientRepresentativeWhereUniqueInput!
  ): ClientRepresentative
  _allClientRepresentativesMeta(
    where: ClientRepresentativeWhereInput! = {}
    search: String
    sortBy: [SortClientRepresentativesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClientRepresentativeOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use clientRepresentativesCount instead."
    )
  clientRepresentativesCount(where: ClientRepresentativeWhereInput! = {}): Int
  allProjects(
    where: ProjectWhereInput! = {}
    search: String
    sortBy: [SortProjectsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProjectOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Project!]
  Project(where: ProjectWhereUniqueInput!): Project
  _allProjectsMeta(
    where: ProjectWhereInput! = {}
    search: String
    sortBy: [SortProjectsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ProjectOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use projectsCount instead."
    )
  projectsCount(where: ProjectWhereInput! = {}): Int
  allEmployees(
    where: EmployeeWhereInput! = {}
    search: String
    sortBy: [SortEmployeesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [EmployeeOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Employee!]
  Employee(where: EmployeeWhereUniqueInput!): Employee
  _allEmployeesMeta(
    where: EmployeeWhereInput! = {}
    search: String
    sortBy: [SortEmployeesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [EmployeeOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use employeesCount instead."
    )
  employeesCount(where: EmployeeWhereInput! = {}): Int
  allSkills(
    where: SkillWhereInput! = {}
    search: String
    sortBy: [SortSkillsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SkillOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Skill!]
  Skill(where: SkillWhereUniqueInput!): Skill
  _allSkillsMeta(
    where: SkillWhereInput! = {}
    search: String
    sortBy: [SortSkillsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [SkillOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use skillsCount instead."
    )
  skillsCount(where: SkillWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
